name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]

jobs:
  deploy-preview:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Fly.io
      uses: superfly/flyctl-actions/setup-flyctl@master
      with:
        api-token: ${{ secrets.FLY_API_TOKEN }}

    - name: Deploy to Fly.io
      id: deploy
      run: |
        # Obtener usuario y nÃºmero de PR
        USERNAME="${{ github.actor }}"
        PR_NUMBER="${{ github.event.number }}"
        APP_NAME="easybits-${USERNAME}-${PR_NUMBER}"
        
        # Verificar si la app ya existe
        if ! flyctl status --app $APP_NAME &>/dev/null; then
          # Crear nueva app
          flyctl apps create $APP_NAME --json | jq -r .Hostname > hostname.txt
          flyctl regions set qro --app $APP_NAME
          flyctl deploy --app $APP_NAME --region qro
        else
          # Actualizar app existente
          flyctl deploy --app $APP_NAME --region qro
          flyctl status --app $APP_NAME --json | jq -r .Hostname > hostname.txt
        fi
        
        # Guardar URL para el deployment
        echo "DEPLOY_URL=https://$(cat hostname.txt)" >> $GITHUB_ENV
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

    - name: Update GitHub Deployment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha,
            environment: `preview-${context.actor}-${context.payload.number}`,
            auto_merge: false,
            required_contexts: [],
            transient_environment: true,
            production_environment: false
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.id,
            state: 'success',
            environment_url: process.env.DEPLOY_URL,
            log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          });

  cleanup-preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Fly.io
      uses: superfly/flyctl-actions/setup-flyctl@master
      with:
        api-token: ${{ secrets.FLY_API_TOKEN }}

    - name: Delete preview app
      run: |
        USERNAME="${{ github.actor }}"
        PR_NUMBER="${{ github.event.number }}"
        APP_NAME="easybits-${USERNAME}-${PR_NUMBER}"
        
        # Verificar si la app existe antes de intentar borrarla
        if flyctl status --app $APP_NAME &>/dev/null; then
          flyctl apps destroy $APP_NAME -y || true
        fi

    - name: Mark deployment as inactive
      uses: actions/github-script@v7
      with:
        script: |
          // Obtener el deployment existente
          const { data: deployments } = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            environment: `preview-${context.actor}-${context.payload.number}`
          });
          
          // Marcar como inactivo
          for (const deployment of deployments) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'inactive',
              environment: `preview-${context.actor}-${context.payload.number}`
            });
          }
