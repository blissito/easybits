name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  deploy-preview:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    concurrency: preview-${{ github.event.number }}
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          api-token: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy preview
        id: deploy
        run: |
          PR_NUMBER="${{ github.event.number }}"
          APP_NAME="easybits-preview-$PR_NUMBER"
          MAIN_APP="easybits"

          # Check if this PR should be staging
          IS_STAGING=false
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'staging') }}" == "true" ]]; then
            IS_STAGING=true
            echo "This PR is marked as staging!"
          elif [[ "${{ github.event.pull_request.title }}" == *"[STAGING]"* ]]; then
            IS_STAGING=true
            echo "This PR title contains [STAGING]!"
          fi

          # Deploy or update app
          if flyctl status --app $APP_NAME &>/dev/null; then
            echo "Updating existing preview app"
            # Copy essential variables only (fast and simple)
            flyctl secrets set \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
              GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
              NODE_ENV="preview" \
              --app $APP_NAME
            flyctl deploy --app $APP_NAME --remote-only --detach
          else
            echo "Creating new preview app"
            flyctl apps create $APP_NAME --org personal
            
            # Copy essential variables only (fast and simple)
            flyctl secrets set \
              DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
              GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
              NODE_ENV="preview" \
              --app $APP_NAME
            
            flyctl deploy --app $APP_NAME --remote-only --detach
          fi

          # Get app URL
          HOSTNAME=$(flyctl status --app $APP_NAME --json | jq -r .Hostname)
          PREVIEW_URL="https://$HOSTNAME"

          # Scale to 1 machine for cost optimization
          echo "Scaling preview app to 1 machine for cost optimization"
          flyctl scale count 1 --app $APP_NAME --yes

          # If this is staging, set up staging-specific configuration
          if [[ "$IS_STAGING" == "true" ]]; then
            echo "Setting up staging configuration..."
            flyctl secrets set NODE_ENV="staging" --app $APP_NAME
            flyctl secrets set STAGING_URL="https://$HOSTNAME" --app $APP_NAME
            echo "Staging URL: https://$HOSTNAME"
          fi

          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "is_staging=$IS_STAGING" >> $GITHUB_OUTPUT

      - name: Deploy to staging (if PR has staging label)
        if: contains(github.event.pull_request.labels.*.name, 'staging')
        run: |
          echo "Deploying to staging machine..."
          STAGING_APP="easybits-staging"
          MAIN_APP="easybits"

          # Ensure staging app exists
          if ! flyctl status --app $STAGING_APP &>/dev/null; then
            echo "Creating staging app..."
            flyctl apps create $STAGING_APP --org personal
          fi

          # Copy essential variables only (fast and simple)
          flyctl secrets set \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
            NODE_ENV="staging" \
            --app $STAGING_APP

          # Configure custom domain for staging (if available)
          echo "Configuring staging domain..."
          flyctl certs create staging.easybits.cloud --app $STAGING_APP || echo "Domain already configured or not available"

          # Deploy to staging
          flyctl deploy --app $STAGING_APP --remote-only --detach

          # Get staging URL (prefer custom domain)
          STAGING_URL="https://staging.easybits.cloud"
          echo "Staging deployed to: $STAGING_URL"
          echo "staging_url=$STAGING_URL" >> $GITHUB_ENV

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
            const appName = '${{ steps.deploy.outputs.app_name }}';
            const isStaging = '${{ steps.deploy.outputs.is_staging }}';
            const stagingUrl = '${{ env.staging_url }}';

            let comment = `## ðŸš€ Preview Deployment Ready!

            **Preview URL:** ${previewUrl}
            **App Name:** ${appName}

            Your preview deployment is now live and ready for testing! ðŸŽ‰`;

            if (isStaging === 'true' && stagingUrl) {
              comment += `\n\n## ðŸŽ¯ Staging Deployment
              
              **Staging URL:** ${stagingUrl}
              
              This PR has been deployed to staging as well!`;
            }

            // Check if comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number
            });

            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: comment
              });
            }

  cleanup-preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    concurrency: preview-${{ github.event.number }}

    steps:
      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          api-token: ${{ secrets.FLY_API_TOKEN }}

      - name: Destroy preview app
        run: |
          PR_NUMBER="${{ github.event.number }}"
          APP_NAME="easybits-preview-$PR_NUMBER"

          if flyctl status --app $APP_NAME &>/dev/null; then
            echo "Destroying preview app: $APP_NAME"
            flyctl apps destroy $APP_NAME -y
          else
            echo "Preview app $APP_NAME not found"
          fi

      - name: Mark deployment inactive
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: `preview-${context.payload.number}`
            });

            for (const deployment of deployments.data) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                environment: `preview-${context.payload.number}`
              });
            }
