name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  deploy-preview:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    concurrency: preview-${{ github.event.number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          api-token: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy preview
        id: deploy
        run: |
          PR_NUMBER="${{ github.event.number }}"
          APP_NAME="easybits-preview-$PR_NUMBER"
          MAIN_APP="easybits"  # Tu app principal

          # Deploy or update app
          if flyctl status --app $APP_NAME &>/dev/null; then
            echo "Updating existing preview app"
            # Copy secrets from main app to preview app
            flyctl secrets list --app $MAIN_APP --json | jq -r '.[].Name' | while read secret_name; do
              echo "Copying secret: $secret_name"
              flyctl secrets set $secret_name="$(flyctl secrets list --app $MAIN_APP --json | jq -r ".[] | select(.Name==\"$secret_name\") | .Digest")" --app $APP_NAME
            done
            flyctl deploy --app $APP_NAME --remote-only
          else
            echo "Creating new preview app"
            flyctl apps create $APP_NAME --org personal
            
            # Copy all secrets from main app to new preview app
            echo "Copying all secrets from main app..."
            flyctl secrets list --app $MAIN_APP --json | jq -r '.[].Name' | while read secret_name; do
              echo "Copying secret: $secret_name"
              flyctl secrets set $secret_name="$(flyctl secrets list --app $MAIN_APP --json | jq -r ".[] | select(.Name==\"$secret_name\") | .Digest")" --app $APP_NAME
            done
            
            flyctl deploy --app $APP_NAME --remote-only
          fi

          # Get app URL
          HOSTNAME=$(flyctl status --app $APP_NAME --json | jq -r .Hostname)
          PREVIEW_URL="https://$HOSTNAME"

          # Scale to 1 machine for cost optimization
          echo "Scaling preview app to 1 machine for cost optimization"
          flyctl scale count 1 --app $APP_NAME

          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: `preview-${context.payload.number}`,
              auto_merge: false,
              required_contexts: [],
              transient_environment: true,
              production_environment: false,
              description: `Preview deployment for PR #${context.payload.number}`
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.preview_url }}',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

  cleanup-preview:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    concurrency: preview-${{ github.event.number }}

    steps:
      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          api-token: ${{ secrets.FLY_API_TOKEN }}

      - name: Destroy preview app
        run: |
          PR_NUMBER="${{ github.event.number }}"
          APP_NAME="easybits-preview-$PR_NUMBER"

          if flyctl status --app $APP_NAME &>/dev/null; then
            echo "Destroying preview app: $APP_NAME"
            flyctl apps destroy $APP_NAME -y
          else
            echo "Preview app $APP_NAME not found"
          fi

      - name: Mark deployment inactive
        uses: actions/github-script@v7
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: `preview-${context.payload.number}`
            });

            for (const deployment of deployments.data) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: 'inactive',
                environment: `preview-${context.payload.number}`
              });
            }
