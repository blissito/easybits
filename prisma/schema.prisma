generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AssetType {
  DOWNLOADABLE
  VOD_COURSE
  WEBINAR
  EBOOK
}

type AssetExtraSettingsSettings {
  stock       Int
  sold        Int
  showReviews Boolean
}

type AssetTemplateSettings {
  ctaText      String
  templateName String
  domain       String?
}

model Asset {
  id          String                      @id @default(auto()) @map("_id") @db.ObjectId
  slug        String                      @unique
  title       String
  description String?
  type        AssetType                   @default(DOWNLOADABLE)
  price       Float                       @default(0)
  currency    String                      @default("mxn")
  gallery     String[]
  fileIds     String[]                    @db.ObjectId
  template    AssetTemplateSettings?
  published   Boolean                     @default(false)
  publicLink  String?
  extra       AssetExtraSettingsSettings?
  // ownership and metadata
  userId      String                      @db.ObjectId
  user        User                        @relation(fields: [userId], references: [id])
  // dates
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @updatedAt
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  // file ownership
  assets         Asset[]
  files          File[]
  publicKey      String   @unique
  // defaults
  displayName    String?
  email          String   @unique
  host           String?  @unique
  verified_email Boolean  @default(false)
  picture        String?
  phoneNumber    String?
  roles          String[]
  metadata       Json?
  stripe         Json?
  // dates
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum FileStatus {
  PENDING
  WORKING
  DONE
  ERROR
  DELETED
}

model File {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  storageKey            String     @unique
  slug                  String     @unique
  name                  String
  size                  Float
  contentType           String
  metadata              Json?
  // ^ meta
  status                FileStatus @default(PENDING)
  masterPlaylistContent String?
  masterPlaylistURL     String?
  versions              String[]
  // ^ hls
  url                   String
  access                String     @default("public-read")
  // ^ share
  ownerId               String     @db.ObjectId
  // ^ ownership
  owner                 User       @relation(fields: [ownerId], references: [id])
  assetIds              String[]   @db.ObjectId
  // ^ relations
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  // ^ auto-dates
}
