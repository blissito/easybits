generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AssetType {
  VOD_COURSE
  EMAIL_COURSE
  WEBINAR
  EBOOK
  DOWNLOADABLE
}

type AssetExtraSettings {
  stock       Int?
  showSold    Boolean?
  showReviews Boolean?
}

type AssetTemplateSettings {
  ctaText      String
  templateName String
  host         String?
  slug         String?
}

type AssetWebinarMetadata {
  numberOfSessions Int?
  roomId           String?
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  customer_email  String
  assetId         String   @db.ObjectId
  customerId      String?
  userId          String?  @db.ObjectId
  stripePriceId   String?
  stripeInvoiceId String?
  pricePaid       String? // `$ 1024.50 MXN`
  note            String?
  //
  user            User?    @relation(fields: [userId], references: [id])
  asset           Asset?   @relation(fields: [assetId], references: [id])
  // dates
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Asset {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  slug  String @unique
  title String

  actions     Json[]
  tags        String                 @default("")
  note        String?
  description String?
  eventDate   DateTime?
  roomId      String? // provisional
  metadata    AssetWebinarMetadata? // used for type webinar, for example.
  type        AssetType              @default(DOWNLOADABLE)
  price       Float?                 @default(0)
  currency    String                 @default("mxn")
  gallery     String[]
  template    AssetTemplateSettings?
  published   Boolean                @default(false)
  publicLink  String?
  stripePrice String?
  extra       AssetExtraSettings?
  // ownership and metadata
  userId      String                 @db.ObjectId
  user        User                   @relation(fields: [userId], references: [id])
  files       File[]
  // dates
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  Order       Order[]
}

type NewsLetter {
  next    Int    @default(1) // 0 is done
  assetId String
}

type Metadata {
  asset_types   String[]
  customer_type String?
}

type Notifications {
  sells      Boolean @default(true)
  reviews    Boolean @default(true)
  newsletter Boolean @default(true)
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  confirmed      Boolean        @default(false)
  // file ownership
  // assets         Asset[]
  // storageUsed    Int?         @default(0) // thinking about it @todo
  assets         Asset[]
  files          File[]
  publicKey      String?        @unique
  // defaults
  displayName    String?
  email          String         @unique
  verified_email Boolean?
  family_name    String?
  given_name     String?
  picture        String?
  phoneNumber    String?
  roles          String[]
  metadata       Metadata?
  stripe         Json?
  // domain stuff
  host           String?        @unique
  dnsConfig      Json?
  // subscriptions
  newsletters    NewsLetter[]
  notifications  Notifications?
  assetIds       String[] // experiment
  customer       String?
  // dates
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Order          Order[]
}

enum FileStatus {
  PENDING
  WORKING
  DONE
  ERROR
  DELETED
}

model File {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  storageKey            String     @unique
  slug                  String     @unique
  name                  String
  size                  Float
  contentType           String
  metadata              Json?
  // ^ meta
  status                FileStatus @default(PENDING)
  masterPlaylistContent String?
  masterPlaylistURL     String?
  versions              String[]
  // ^ hls
  url                   String
  access                String     @default("private")
  // ^ share
  ownerId               String     @db.ObjectId
  // ^ ownership
  owner                 User       @relation(fields: [ownerId], references: [id])
  assetIds              String[]   @db.ObjectId
  actionId              String?
  // ^ relations
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  // ^ auto-dates
  Asset                 Asset?     @relation(fields: [assetId], references: [id])
  assetId               String?    @db.ObjectId
}

model Client {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  email       String
  displayName String

  phone       String?
  address     String?
  companyName String?
  comments    String?
  assets      String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ^ auto-dates
}
