generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AssetType {
  VOD_COURSE
  EMAIL_COURSE
  WEBINAR
  EBOOK
  DOWNLOADABLE
}

type AssetExtraSettings {
  stock             String?
  showSold          Boolean?
  showReviews       Boolean?
  showInMarketplace Boolean?
}

type AssetTemplateSettings {
  ctaText      String
  templateName String
  host         String?
  slug         String?
}

type AssetWebinarMetadata {
  numberOfSessions String?
  roomId           String?
  freePages        String?
  numberOfPages    String?
}

model Asset {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  slug  String @unique
  title String

  actions       Json[]
  tags          String                 @default("")
  note          String?
  description   String?
  eventDate     DateTime?
  roomId        String? // provisional
  metadata      AssetWebinarMetadata? // used for type webinar, for example.
  type          AssetType              @default(DOWNLOADABLE)
  price         Float?                 @default(0)
  currency      String                 @default("mxn")
  gallery       String[]
  template      AssetTemplateSettings?
  published     Boolean                @default(false)
  publicLink    String?
  stripePrice   String?
  stripeProduct String?
  extra         AssetExtraSettings?
  // ownership and metadata
  userId        String                 @db.ObjectId
  user          User                   @relation(fields: [userId], references: [id])
  files         File[]
  // dates
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  Order         Order[]
  Review        Review[]
}

model Order {
  // must
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  customer_email String
  assetId        String   @db.ObjectId
  // optional
  price          Float?   @default(0)
  currency       String?  @default("mxn")
  status         String?  @default("Paid")
  merchantId     String?  @db.ObjectId // User.id
  customerId     String?  @db.ObjectId // Could also be User.id
  total          String?  @default("$ 0.00") // `$ 1024.50 MXN`
  priceId        String?
  productId      String?
  note           String?
  //
  merchant       User?    @relation("OrderMerchant", fields: [merchantId], references: [id])
  customer       User?    @relation("OrderCustomer", fields: [customerId], references: [id])
  asset          Asset    @relation(fields: [assetId], references: [id])
  // dates
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

type NewsLetter {
  next    Int    @default(1) // 0 is done
  assetId String
}

type Metadata {
  asset_types   String[]
  customer_type String?
}

type Notifications {
  sells      Boolean @default(true)
  reviews    Boolean @default(true)
  newsletter Boolean @default(true)
}

type StoreConfig {
  colorMode      String  @default("light")
  typography     String  @default("")
  hexColor       String  @default("")
  socialNetworks Boolean @default(true)
  showProducts   Boolean @default(true)
  instagram      String  @default("")
  facebook       String  @default("")
  tiktok         String  @default("")
  youtube        String  @default("")
  linkedin       String  @default("")
  x              String  @default("")
  website        String  @default("")
  metadata       Json?
  logoImage      String  @default("")
  coverImage     String  @default("")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  confirmed      Boolean        @default(false)
  // file ownership
  // assets         Asset[]
  // storageUsed    Int?         @default(0) // thinking about it @todo
  assets         Asset[]
  files          File[]
  publicKey      String?        @unique
  // defaults
  displayName    String?
  email          String         @unique
  verified_email Boolean?
  family_name    String?
  given_name     String?
  picture        String?
  phoneNumber    String?
  roles          String[]
  metadata       Metadata?
  stripeId       String?
  // domain stuff
  host           String?        @unique
  dnsConfig      Json?
  domain         String?
  // subscriptions
  newsletters    NewsLetter[]
  notifications  Notifications?
  assetIds       String[] // experiment
  customer       String?
  // dates
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  storeConfig    StoreConfig?
  Review         Review[]
  merchantOrders Order[]        @relation("OrderMerchant")
  customerOrders Order[]        @relation("OrderCustomer")
}

enum FileStatus {
  PENDING
  WORKING
  DONE
  ERROR
  DELETED
}

model File {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  storageKey            String     @unique
  slug                  String     @unique
  name                  String
  size                  Float
  contentType           String
  metadata              Json?
  // ^ meta
  status                FileStatus @default(PENDING)
  masterPlaylistContent String?
  masterPlaylistURL     String?
  versions              String[]
  // ^ hls
  url                   String
  access                String     @default("private")
  // ^ share
  ownerId               String     @db.ObjectId
  // ^ ownership
  owner                 User       @relation(fields: [ownerId], references: [id])
  assetIds              String[]   @db.ObjectId
  actionId              String?
  // ^ relations
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  // ^ auto-dates
  Asset                 Asset?     @relation(fields: [assetId], references: [id])
  assetId               String?    @db.ObjectId
}

model Client {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  email       String
  displayName String

  phone       String?
  address     String?
  companyName String?
  comments    String?
  assets      String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ^ auto-dates
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  assetId String @db.ObjectId
  Asset   Asset  @relation(fields: [assetId], references: [id])
  comment String
  rating  Int    @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
